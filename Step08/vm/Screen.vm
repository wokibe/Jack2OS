// /Users/kittekat/Documents/Jack2Kotlin/Jack2OS/Step08/./vm/Screen.vm generated at 2017-10-29 21:43
// class Screen
// ## STATIC        0 screen       Array   
// ## STATIC        1 black        boolean 
// ## CONSTANT    512 WIDTH        int     
// ## CONSTANT    256 HEIGHT       int     
// ## CONSTANT     16 BITS         int     
// ## CONSTANT     32 ROW_SIZE     int     
// ## CONSTANT   8192 SCREEN_SIZE  int     
// ## CONSTANT    181 MAX_RADIUS   int     
// #########################################################
// function void init
function Screen.init 0
//   21     let screen = 16384;
push constant 16384
pop static 0
//   22     let black = true;
push constant 1
neg
pop static 1
//   23     return;
push constant 0
return
// #########################################################
// function void clearScreen
function Screen.clearScreen 1
// ## LOCAL         0 i            int     
//   30     while (i < SCREEN_SIZE) {
label W-EXP0
push local 0
push constant 8192
lt
not
if-goto W-END0
//   31       let screen[i] = 0;      // clear 16 bits at once
// calculate array index
push local 0
// add base address
push static 0
add
// calculate value
push constant 0
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//   32       let i = i + 1;
push local 0
push constant 1
add
pop local 0
goto W-EXP0
label W-END0
//   34     return;
push constant 0
return
// #########################################################
// function void setColor
function Screen.setColor 0
// ## ARGUMENT      0 b            boolean 
//   40     let black = b;            // save the color in static variable
push argument 0
pop static 1
//   41     return;
push constant 0
return
// #########################################################
// function void drawPixel
function Screen.drawPixel 2
// ## LOCAL         0 word         int     
// ## LOCAL         1 bit          int     
// ## ARGUMENT      0 x            int     
// ## ARGUMENT      1 y            int     
//   49     if (Screen.badCoord(x, y)) {
// remote function call
push argument 0
push argument 1
call Screen.badCoord 2
not
if-goto I-ELS0
//   50       do Sys.error(7);                    // Illegal pixel coordinates
// remote function call
push constant 7
call Sys.error 1
// discard the void return
pop temp 0
goto I-END0
label I-ELS0
label I-END0
//   53     let word = (y * ROW_SIZE) + (x / BITS);
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
//   54     let bit = Util.bit(x - (x / BITS * BITS));    // bit[x - mod(x, BITS)]
// remote function call
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
call Util.bit 1
pop local 1
//   56     if (black) {
push static 1
not
if-goto I-ELS1
//   57       let screen[word] = screen[word] | bit;    // set this bit
// calculate array index
push local 0
// add base address
push static 0
add
// calculate value
// calculate array index
push local 0
// add base address
push static 0
add
// read from array
pop pointer 1
push that 0
push local 1
or
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto I-END1
label I-ELS1
//   60       let screen[word] = screen[word] & ~bit;   // clear this bit
// calculate array index
push local 0
// add base address
push static 0
add
// calculate value
// calculate array index
push local 0
// add base address
push static 0
add
// read from array
pop pointer 1
push that 0
push local 1
not
and
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
label I-END1
//   62     return;
push constant 0
return
// #########################################################
// function void drawLine
function Screen.drawLine 3
// ## LOCAL         0 dx           int     
// ## LOCAL         1 dy           int     
// ## LOCAL         2 tmp          int     
// ## ARGUMENT      0 x1           int     
// ## ARGUMENT      1 y1           int     
// ## ARGUMENT      2 x2           int     
// ## ARGUMENT      3 y2           int     
//   70     if (Screen.badCoord(x1,y1) | Screen.badCoord(x2, y2)) {
// remote function call
push argument 0
push argument 1
call Screen.badCoord 2
// remote function call
push argument 2
push argument 3
call Screen.badCoord 2
or
not
if-goto I-ELS0
//   71       do Sys.error(8);                // illegal line coordinates
// remote function call
push constant 8
call Sys.error 1
// discard the void return
pop temp 0
goto I-END0
label I-ELS0
label I-END0
//   75     if (x1 > x2) {                    // swap (x1, y1) with (x2, y2)
push argument 0
push argument 2
gt
not
if-goto I-ELS1
//   76       let tmp = x1;
push argument 0
pop local 2
//   77       let x1 = x2;
push argument 2
pop argument 0
//   78       let x2 = tmp;
push local 2
pop argument 2
//   79       let tmp = y1;
push argument 1
pop local 2
//   80       let y1 = y2;
push argument 3
pop argument 1
//   81       let y2 = tmp;
push local 2
pop argument 3
goto I-END1
label I-ELS1
label I-END1
//   84     let dx = x2 - x1;
push argument 2
push argument 0
sub
pop local 0
//   85     let dy = y2 - y1;
push argument 3
push argument 1
sub
pop local 1
//   87     if (dx = 0) {
push local 0
push constant 0
eq
not
if-goto I-ELS2
//   88       do Screen.drawVert(x1, y1, y2);
// remote function call
push argument 0
push argument 1
push argument 3
call Screen.drawVert 3
// discard the void return
pop temp 0
goto I-END2
label I-ELS2
//   90     else { if (dy = 0) {
push local 1
push constant 0
eq
not
if-goto I-ELS3
//   91       do Screen.drawHorz(x1, x2, y1);
// remote function call
push argument 0
push argument 2
push argument 1
call Screen.drawHorz 3
// discard the void return
pop temp 0
goto I-END3
label I-ELS3
//   94       do Screen.drawDiag(x1, y1, x2, y2, dx, dy);
// remote function call
push argument 0
push argument 1
push argument 2
push argument 3
push local 0
push local 1
call Screen.drawDiag 6
// discard the void return
pop temp 0
label I-END3
label I-END2
//   96     return;
push constant 0
return
// #########################################################
// function void drawDiag
function Screen.drawDiag 4
// ## LOCAL         0 a            int     
// ## LOCAL         1 b            int     
// ## LOCAL         2 adyMinusbdx  int     
// ## LOCAL         3 y_step       int     
// ## ARGUMENT      0 x1           int     
// ## ARGUMENT      1 y1           int     
// ## ARGUMENT      2 x2           int     
// ## ARGUMENT      3 y2           int     
// ## ARGUMENT      4 dx           int     
// ## ARGUMENT      5 dy           int     
//  106     let a = 0;
push constant 0
pop local 0
//  107     let b = 0;
push constant 0
pop local 1
//  108     let adyMinusbdx = 0;
push constant 0
pop local 2
//  112     if (dy < 0) {                 // from (top, left) to (bottom, right)
push argument 5
push constant 0
lt
not
if-goto I-ELS0
//  113       let y_step = -1;
push constant 1
neg
pop local 3
goto I-END0
label I-ELS0
//  116       let y_step = 1;
push constant 1
pop local 3
label I-END0
//  119     while ( ~(a > dx) &                           // a in range
label W-EXP0
push local 0
push argument 4
gt
not
push local 3
push constant 1
eq
push local 1
push argument 5
gt
not
and
push local 3
push constant 1
neg
eq
push local 1
push argument 5
lt
not
and
or
and
not
if-goto W-END0
//  122       do Screen.drawPixel(x1 + a, y1 + b);
// remote function call
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
// discard the void return
pop temp 0
//  123       if (adyMinusbdx < 0) {
push local 2
push constant 0
lt
not
if-goto I-ELS1
//  124         let a = a + 1;                            // a + x_step
push local 0
push constant 1
add
pop local 0
//  125         let adyMinusbdx = adyMinusbdx + (dy * y_step);
push local 2
push argument 5
push local 3
call Math.multiply 2
add
pop local 2
goto I-END1
label I-ELS1
//  128         let b = b + y_step;
push local 1
push local 3
add
pop local 1
//  129         let adyMinusbdx = adyMinusbdx - dx;       // adyMinusbdx - (dx * x_step)
push local 2
push argument 4
sub
pop local 2
label I-END1
goto W-EXP0
label W-END0
//  132     return;
push constant 0
return
// #########################################################
// function void drawHorz
function Screen.drawHorz 4
// ## LOCAL         0 left_addr    int     
// ## LOCAL         1 right_addr   int     
// ## LOCAL         2 left_mod     int     
// ## LOCAL         3 right_mod    int     
// ## ARGUMENT      0 x1           int     
// ## ARGUMENT      1 x2           int     
// ## ARGUMENT      2 y            int     
//  142     let left_mod  = x1 & 15;                    // fast modulo 16
push argument 0
push constant 15
and
pop local 2
//  143     let right_mod = x2 & 15;
push argument 1
push constant 15
and
pop local 3
//  144     let left_addr  = (y * ROW_SIZE) + (x1 / BITS);
push argument 2
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
//  145     let right_addr = (y * ROW_SIZE) + (x2 / BITS) + (right_mod = 0);  // adjust
push argument 2
push constant 32
call Math.multiply 2
push argument 1
push constant 16
call Math.divide 2
add
push local 3
push constant 0
eq
add
pop local 1
//  147     if (left_addr = right_addr) {             // no middle part
push local 0
push local 1
eq
not
if-goto I-ELS0
//  148       do Screen.drawSlow(x1, x2, y);
// remote function call
push argument 0
push argument 1
push argument 2
call Screen.drawSlow 3
// discard the void return
pop temp 0
goto I-END0
label I-ELS0
//  151       if (~(left_mod = 0)) {                  // left part
push local 2
push constant 0
eq
not
not
if-goto I-ELS1
//  152         let left_addr = left_addr + 1;        // prepare for middle part
push local 0
push constant 1
add
pop local 0
//  153         do Screen.drawSlow(x1, x1 + 16 - left_mod, y);
// remote function call
push argument 0
push argument 0
push constant 16
add
push local 2
sub
push argument 2
call Screen.drawSlow 3
// discard the void return
pop temp 0
goto I-END1
label I-ELS1
label I-END1
//  155       if (~(right_mod = 0)) {                 // right part
push local 3
push constant 0
eq
not
not
if-goto I-ELS2
//  156         let right_addr = right_addr - 1;      // prepare for middle part
push local 1
push constant 1
sub
pop local 1
//  157         do Screen.drawSlow(x2 - right_mod, x2, y);
// remote function call
push argument 1
push local 3
sub
push argument 1
push argument 2
call Screen.drawSlow 3
// discard the void return
pop temp 0
goto I-END2
label I-ELS2
label I-END2
//  159       while (~(left_addr > right_addr)) {     // middle part
label W-EXP0
push local 0
push local 1
gt
not
not
if-goto W-END0
//  160         let screen[left_addr] = black;
// calculate array index
push local 0
// add base address
push static 0
add
// calculate value
push static 1
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  161         let left_addr = left_addr + 1;
push local 0
push constant 1
add
pop local 0
goto W-EXP0
label W-END0
label I-END0
//  164     return;
push constant 0
return
// #########################################################
// function void drawSlow
function Screen.drawSlow 0
// ## ARGUMENT      0 x1           int     
// ## ARGUMENT      1 x2           int     
// ## ARGUMENT      2 y            int     
//  170     while (~(x1 > x2)) {
label W-EXP0
push argument 0
push argument 1
gt
not
not
if-goto W-END0
//  171       do Screen.drawPixel(x1, y);
// remote function call
push argument 0
push argument 2
call Screen.drawPixel 2
// discard the void return
pop temp 0
//  172       let x1 = x1 + 1;
push argument 0
push constant 1
add
pop argument 0
goto W-EXP0
label W-END0
//  174     return;
push constant 0
return
// #########################################################
// function void drawVert
function Screen.drawVert 1
// ## LOCAL         0 tmp          int     
// ## ARGUMENT      0 x            int     
// ## ARGUMENT      1 y1           in      
// ## ARGUMENT      2 y2           int     
//  182     if (y1 > y2) {                    // swap (x, y1) with (x, y2)
push argument 1
push argument 2
gt
not
if-goto I-ELS0
//  183       let tmp = y1;
push argument 1
pop local 0
//  184       let y1 = y2;
push argument 2
pop argument 1
//  185       let y2 = tmp;
push local 0
pop argument 2
goto I-END0
label I-ELS0
label I-END0
//  188     while (~(y1 > y2)) {
label W-EXP0
push argument 1
push argument 2
gt
not
not
if-goto W-END0
//  189       do Screen.drawPixel(x, y1);
// remote function call
push argument 0
push argument 1
call Screen.drawPixel 2
// discard the void return
pop temp 0
//  190       let y1 = y1 + 1;
push argument 1
push constant 1
add
pop argument 1
goto W-EXP0
label W-END0
//  192     return;
push constant 0
return
// #########################################################
// function void drawRectangle
function Screen.drawRectangle 1
// ## LOCAL         0 y            int     
// ## ARGUMENT      0 x1           int     
// ## ARGUMENT      1 y1           int     
// ## ARGUMENT      2 x2           int     
// ## ARGUMENT      3 y2           int     
//  200     if (Screen.badCoord(x1,y1) | Screen.badCoord(x2, y2)) {
// remote function call
push argument 0
push argument 1
call Screen.badCoord 2
// remote function call
push argument 2
push argument 3
call Screen.badCoord 2
or
not
if-goto I-ELS0
//  201       do Sys.error(9);                // illegal rectangle coordinates
// remote function call
push constant 9
call Sys.error 1
// discard the void return
pop temp 0
goto I-END0
label I-ELS0
label I-END0
//  204     let y = y1;
push argument 1
pop local 0
//  205     while (~(y > y2)) {
label W-EXP0
push local 0
push argument 3
gt
not
not
if-goto W-END0
//  206       do Screen.drawHorz(x1, x2, y);
// remote function call
push argument 0
push argument 2
push local 0
call Screen.drawHorz 3
// discard the void return
pop temp 0
//  207       let y = y + 1;
push local 0
push constant 1
add
pop local 0
goto W-EXP0
label W-END0
//  209     return;
push constant 0
return
// #########################################################
// function void drawCircle
function Screen.drawCircle 3
// ## LOCAL         0 dx           int     
// ## LOCAL         1 dy           int     
// ## LOCAL         2 r2           int     
// ## ARGUMENT      0 cx           int     
// ## ARGUMENT      1 cy           int     
// ## ARGUMENT      2 r            int     
//  217     if (Screen.badCoord(cx, cy)) {
// remote function call
push argument 0
push argument 1
call Screen.badCoord 2
not
if-goto I-ELS0
//  218       do Sys.error(12);                     // Illegal center coordinates
// remote function call
push constant 12
call Sys.error 1
// discard the void return
pop temp 0
goto I-END0
label I-ELS0
label I-END0
//  220     if (r > MAX_RADIUS) {                   // (r < MAXRADIUS)
push argument 2
push constant 181
gt
not
if-goto I-ELS1
//  221       do Sys.error(13);                     // illegal radius
// remote function call
push constant 13
call Sys.error 1
// discard the void return
pop temp 0
goto I-END1
label I-ELS1
label I-END1
//  224     let dy = -r;
push argument 2
neg
pop local 1
//  225     let r2 = r * r;
push argument 2
push argument 2
call Math.multiply 2
pop local 2
//  226     while (~(dy > r)) {
label W-EXP0
push local 1
push argument 2
gt
not
not
if-goto W-END0
//  227       let dx = Math.sqrt(r2 - (dy * dy));
// remote function call
push local 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 0
//  228       do Screen.drawHorz(cx - dx, cx + dx, cy + dy);
// remote function call
push argument 0
push local 0
sub
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawHorz 3
// discard the void return
pop temp 0
//  229       let dy = dy + 1;
push local 1
push constant 1
add
pop local 1
goto W-EXP0
label W-END0
//  231     return;
push constant 0
return
// #########################################################
// function boolean badCoord
function Screen.badCoord 0
// ## ARGUMENT      0 x            int     
// ## ARGUMENT      1 y            int     
//  236     return ((x < 0)             |
push argument 0
push constant 0
lt
push argument 0
push constant 512
push constant 1
sub
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 256
push constant 1
sub
gt
or
return
