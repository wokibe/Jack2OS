// /Users/kittekat/Documents/Jack2Kotlin/Jack2OS/Step08/./vm/Sys.vm generated at 2017-10-29 21:43
// class Sys
// #########################################################
// function void init
function Sys.init 0
//   12       do Memory.init();
// remote function call
call Memory.init 0
// discard the void return
pop temp 0
//   13       do Util.init();
// remote function call
call Util.init 0
// discard the void return
pop temp 0
//   14       do Output.init();
// remote function call
call Output.init 0
// discard the void return
pop temp 0
//   15       do Screen.init();
// remote function call
call Screen.init 0
// discard the void return
pop temp 0
//   16       do Keyboard.init();
// remote function call
call Keyboard.init 0
// discard the void return
pop temp 0
//   17       do Main.main();
// remote function call
call Main.main 0
// discard the void return
pop temp 0
//   18       do Sys.halt();
// remote function call
call Sys.halt 0
// discard the void return
pop temp 0
//   19       return;
push constant 0
return
// #########################################################
// function void halt
function Sys.halt 0
//   24       while (true) {}
label W-EXP0
push constant 1
neg
not
if-goto W-END0
goto W-EXP0
label W-END0
//   25       return;
push constant 0
return
// #########################################################
// function void error
function Sys.error 0
// ## ARGUMENT      0 errorCode    int     
//   31       do Output.printString("Err");
// remote function call
push constant 3
call String.new 1
push constant 69
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 114
call String.appendChar 2
call Output.printString 1
// discard the void return
pop temp 0
//   32       do Output.printInt(errorCode);
// remote function call
push argument 0
call Output.printInt 1
// discard the void return
pop temp 0
//   33       do Sys.halt();
// remote function call
call Sys.halt 0
// discard the void return
pop temp 0
//   34       return;
push constant 0
return
// #########################################################
// function void wait
function Sys.wait 2
// ## LOCAL         0 ms           int     
// ## LOCAL         1 ticks        int     
// ## ARGUMENT      0 duration     int     
// ## CONSTANT    200 TICKS        int     
//   42       if (~(duration > 0)) {
push argument 0
push constant 0
gt
not
not
if-goto I-ELS0
//   43         do Sys.error(1);                // duration must be positive
// remote function call
push constant 1
call Sys.error 1
// discard the void return
pop temp 0
goto I-END0
label I-ELS0
label I-END0
//   46       let ms = 0;
push constant 0
pop local 0
//   47       while (ms < duration) {
label W-EXP0
push local 0
push argument 0
lt
not
if-goto W-END0
//   48         let ticks = 0;
push constant 0
pop local 1
//   49         while (ticks < TICKS) {           // (ticks < TICKS)
label W-EXP1
push local 1
push constant 200
lt
not
if-goto W-END1
//   50           let ticks = ticks + 1;
push local 1
push constant 1
add
pop local 1
goto W-EXP1
label W-END1
//   52         let ms = ms + 1;
push local 0
push constant 1
add
pop local 0
goto W-EXP0
label W-END0
//   54       return;
push constant 0
return
