/// adapted for Jack2c
// from "The Elements of Computing Systems" by Nisan and Schocken, MIT Press
// kittekat Oct/2017

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
  static Array keyboard;

  /** Initializes the keyboard. */
  function void init() {
    let keyboard = 24576;
    return;
  }

  /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, and the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
  function char keyPressed() {
    return keyboard[0];
  }

  /**
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
  function char readChar() {
    var char key;

    do Output.printChar(95);                  // underscore as prompt
    do Output.backSpace();

    while (Keyboard.keyPressed() = 0) {}      // wait until something pressed
    let key = Keyboard.keyPressed();          // collect it

    while (~(Keyboard.keyPressed()=0)) {}     // wait until released
    if (Util.isPrintable(key)) {
      do Output.printChar(key);               // echo it
    } else {
      if (key = String.newLine()) {
        do Output.printChar(32);              // erase the last underscore
        do Output.println();
      }
    }
    return key;
  }

  /**
     * prints the message on the screen and then reads the next line
     * (until a newline character) from the keyboard and returns its value.
     */
  function String readLine(String message) {
    // constant MAX_LINE = 64                // free choosen value
    var String line;
    var char c;

    do Output.printString(message);

    let line = String.new(64);              // String.new(MAX_LINE)
    let c = Keyboard.readChar();
    while (~(c = String.newLine())) {
      if (c = String.backSpace()) {
        if (line.length() > 0) {
          do line.eraseLastChar();
          do Output.printChar(32);          // erase the last underscore
          do Output.backSpace();
          do Output.backSpace();            // reposition cursor
        }
      }
      else {
        do line.appendChar(c);
      }
    let c = Keyboard.readChar();
    }

    return line;
  }

  /**
     * prints the message on the screen and then reads the next line
     * (until a newline character) from the keyboard and returns its
     * integer value (until the first non numeric character).
     */
  function int readInt(String message) {
    var String line;
    var int num;

    let line = Keyboard.readLine(message);
    let num = line.intValue();
    do line.dispose();
    return num;
  }
}
