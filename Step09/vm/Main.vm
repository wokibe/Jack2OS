// /Users/kittekat/Documents/Jack2Kotlin/Jack2OS/Step09/./vm/Main.vm generated at 2017-10-31 06:07
// class Main
// ## CONSTANT      0 BS           int     
// ## CONSTANT      1 NB           int     
// ## CONSTANT     -1 NIL          int     
// #########################################################
// function void main
function Main.main 12
// ## LOCAL         0 a            Array   
// ## LOCAL         1 b            Array   
// ## LOCAL         2 c            Array   
// ## LOCAL         3 d            Array   
// ## LOCAL         4 e            Array   
// ## LOCAL         5 f            Array   
// ## LOCAL         6 loops        int     
// ## LOCAL         7 size         int     
// ## LOCAL         8 fill         boolean 
// ## LOCAL         9 verbose      boolean 
// ## LOCAL        10 i            int     
// ## LOCAL        11 ch           char    
//   17     do Output.printDropString("Stress? (Y/N):");
// remote function call
push constant 14
call String.new 1
push constant 83
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 63
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 40
call String.appendChar 2
push constant 89
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 78
call String.appendChar 2
push constant 41
call String.appendChar 2
push constant 58
call String.appendChar 2
call Output.printDropString 1
// discard the void return
pop temp 0
//   18     let ch = Keyboard.readChar();
// remote function call
call Keyboard.readChar 0
pop local 11
//   19     do Output.println();
// remote function call
call Output.println 0
// discard the void return
pop temp 0
//   21     if (ch = "Y") {
push local 11
push constant 1
call String.new 1
push constant 89
call String.appendChar 2
eq
not
if-goto I-ELS0
//   22       let size  = 100;
push constant 100
pop local 7
//   23       let loops = 1000;
push constant 1000
pop local 6
//   24       let fill  = false;
push constant 0
pop local 8
//   25       let verbose = false;
push constant 0
pop local 9
goto I-END0
label I-ELS0
//   27       let size  = 5;
push constant 5
pop local 7
//   28       let loops = 1;
push constant 1
pop local 6
//   29       let fill  = true;
push constant 1
neg
pop local 8
//   30       let verbose = true;
push constant 1
neg
pop local 9
label I-END0
//   33     let i = 0;
push constant 0
pop local 10
//   36     do Main.printFreeList();
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
//   38     while (i < loops) {
label W-EXP0
push local 10
push local 6
lt
not
if-goto W-END0
//   39       let a = Array.new(size);
// remote function call
push local 7
call Array.new 1
pop local 0
//   40       if (fill) { do Main.fillIt(a, size, 97); }
push local 8
not
if-goto I-ELS1
//   40       if (fill) { do Main.fillIt(a, size, 97); }
// remote function call
push local 0
push local 7
push constant 97
call Main.fillIt 3
// discard the void return
pop temp 0
goto I-END1
label I-ELS1
label I-END1
//   41       let b = Array.new(size);
// remote function call
push local 7
call Array.new 1
pop local 1
//   42       if (fill) { do Main.fillIt(b, size, 98); }
push local 8
not
if-goto I-ELS2
//   42       if (fill) { do Main.fillIt(b, size, 98); }
// remote function call
push local 1
push local 7
push constant 98
call Main.fillIt 3
// discard the void return
pop temp 0
goto I-END2
label I-ELS2
label I-END2
//   43       let c = Array.new(size);
// remote function call
push local 7
call Array.new 1
pop local 2
//   44       if (fill) { do Main.fillIt(c, size, 99); }
push local 8
not
if-goto I-ELS3
//   44       if (fill) { do Main.fillIt(c, size, 99); }
// remote function call
push local 2
push local 7
push constant 99
call Main.fillIt 3
// discard the void return
pop temp 0
goto I-END3
label I-ELS3
label I-END3
//   45       let d = Array.new(size);
// remote function call
push local 7
call Array.new 1
pop local 3
//   46       if (fill) { do Main.fillIt(d, size, 100); }
push local 8
not
if-goto I-ELS4
//   46       if (fill) { do Main.fillIt(d, size, 100); }
// remote function call
push local 3
push local 7
push constant 100
call Main.fillIt 3
// discard the void return
pop temp 0
goto I-END4
label I-ELS4
label I-END4
//   47       let e = Array.new(size);
// remote function call
push local 7
call Array.new 1
pop local 4
//   48       if (fill) { do Main.fillIt(e, size, 101); }
push local 8
not
if-goto I-ELS5
//   48       if (fill) { do Main.fillIt(e, size, 101); }
// remote function call
push local 4
push local 7
push constant 101
call Main.fillIt 3
// discard the void return
pop temp 0
goto I-END5
label I-ELS5
label I-END5
//   49       let f = Array.new(size);
// remote function call
push local 7
call Array.new 1
pop local 5
//   50       if (fill) { do Main.fillIt(f, size, 102); }
push local 8
not
if-goto I-ELS6
//   50       if (fill) { do Main.fillIt(f, size, 102); }
// remote function call
push local 5
push local 7
push constant 102
call Main.fillIt 3
// discard the void return
pop temp 0
goto I-END6
label I-ELS6
label I-END6
//   52       if (verbose) { do Main.printFreeList(); }
push local 9
not
if-goto I-ELS7
//   52       if (verbose) { do Main.printFreeList(); }
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
goto I-END7
label I-ELS7
label I-END7
//   53       do e.dispose();               // a b c d - f
// remote method call
// set arg 0 with remote object
push local 4
call Array.dispose 1
// discard the void return
pop temp 0
//   54       if (verbose) { do Main.printFreeList(); }
push local 9
not
if-goto I-ELS8
//   54       if (verbose) { do Main.printFreeList(); }
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
goto I-END8
label I-ELS8
label I-END8
//   55       do b.dispose();               // a - c d - f
// remote method call
// set arg 0 with remote object
push local 1
call Array.dispose 1
// discard the void return
pop temp 0
//   56       if (verbose) { do Main.printFreeList(); }
push local 9
not
if-goto I-ELS9
//   56       if (verbose) { do Main.printFreeList(); }
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
goto I-END9
label I-ELS9
label I-END9
//   57       do a.dispose();               // - - c d - f
// remote method call
// set arg 0 with remote object
push local 0
call Array.dispose 1
// discard the void return
pop temp 0
//   58       if (verbose) { do Main.printFreeList(); }
push local 9
not
if-goto I-ELS10
//   58       if (verbose) { do Main.printFreeList(); }
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
goto I-END10
label I-ELS10
label I-END10
//   59       do d.dispose();               // - - c - - f
// remote method call
// set arg 0 with remote object
push local 3
call Array.dispose 1
// discard the void return
pop temp 0
//   60       if (verbose) { do Main.printFreeList(); }
push local 9
not
if-goto I-ELS11
//   60       if (verbose) { do Main.printFreeList(); }
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
goto I-END11
label I-ELS11
label I-END11
//   61       do c.dispose();               // - - - - - f
// remote method call
// set arg 0 with remote object
push local 2
call Array.dispose 1
// discard the void return
pop temp 0
//   62       if (verbose) { do Main.printFreeList(); }
push local 9
not
if-goto I-ELS12
//   62       if (verbose) { do Main.printFreeList(); }
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
goto I-END12
label I-ELS12
label I-END12
//   63       do f.dispose();
// remote method call
// set arg 0 with remote object
push local 5
call Array.dispose 1
// discard the void return
pop temp 0
//   64       if (verbose) { do Main.printFreeList(); }
push local 9
not
if-goto I-ELS13
//   64       if (verbose) { do Main.printFreeList(); }
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
goto I-END13
label I-ELS13
label I-END13
//   66       let i = i + 1;
push local 10
push constant 1
add
pop local 10
//   67       if (size < 1000) {
push local 7
push constant 1000
lt
not
if-goto I-ELS14
//   68         let size = size + 11;
push local 7
push constant 11
add
pop local 7
goto I-END14
label I-ELS14
label I-END14
goto W-EXP0
label W-END0
//   72     do Main.printFreeList();    // should deliver the same output at begin
// remote function call
call Main.printFreeList 0
// discard the void return
pop temp 0
//   73     return;
push constant 0
return
// #########################################################
// function void fillIt
function Main.fillIt 1
// ## LOCAL         0 i            int     
// ## ARGUMENT      0 a            Array   
// ## ARGUMENT      1 s            int     
// ## ARGUMENT      2 c            char    
//   80     let i = 0;
push constant 0
pop local 0
//   81     while (i < s) {
label W-EXP0
push local 0
push argument 1
lt
not
if-goto W-END0
//   82       let a[i] = c;
// calculate array index
push local 0
// add base address
push argument 0
add
// calculate value
push argument 2
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//   83       let i = i + 1;
push local 0
push constant 1
add
pop local 0
goto W-EXP0
label W-END0
//   85     return;
push constant 0
return
// #########################################################
// function int getFreeListSize
function Main.getFreeListSize 2
// ## LOCAL         0 nxt          int     
// ## LOCAL         1 sum          int     
//   91     let nxt = Memory.getFreeListAddr();
// remote function call
call Memory.getFreeListAddr 0
pop local 0
//   92     let sum = 0;
push constant 0
pop local 1
//   94     let sum = sum + Memory.peek(nxt + BS);
push local 1
// remote function call
push local 0
push constant 0
add
call Memory.peek 1
add
pop local 1
//   95     let nxt = Memory.peek(nxt + NB);
// remote function call
push local 0
push constant 1
add
call Memory.peek 1
pop local 0
//   97     while (~(nxt = NIL)) {
label W-EXP0
push local 0
push constant 1
neg
eq
not
not
if-goto W-END0
//   98       let sum = sum + Memory.peek(nxt + BS);        // BS
push local 1
// remote function call
push local 0
push constant 0
add
call Memory.peek 1
add
pop local 1
//   99       let nxt = Memory.peek(nxt + NB);              // NB
// remote function call
push local 0
push constant 1
add
call Memory.peek 1
pop local 0
goto W-EXP0
label W-END0
//  102     return sum;
push local 1
return
// #########################################################
// function void printFreeList
function Main.printFreeList 7
// ## LOCAL         0 freeSize     int     
// ## LOCAL         1 i            int     
// ## LOCAL         2 max          int     
// ## LOCAL         3 nxt          int     
// ## LOCAL         4 tmp          int     
// ## LOCAL         5 list         Array   
// ## LOCAL         6 txt          String  
//  112     let freeSize = 40;                            // guesstimate
push constant 40
pop local 0
//  113     let list = Array.new(freeSize + 2);
// remote function call
push local 0
push constant 2
add
call Array.new 1
pop local 5
//  114     let nxt = Memory.getFreeListAddr();
// remote function call
call Memory.getFreeListAddr 0
pop local 3
//  116     let list[0] = nxt;
// calculate array index
push constant 0
// add base address
push local 5
add
// calculate value
push local 3
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  117     let list[1] = Memory.peek(nxt + BS);
// calculate array index
push constant 1
// add base address
push local 5
add
// calculate value
// remote function call
push local 3
push constant 0
add
call Memory.peek 1
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  118     let tmp = Memory.peek(nxt + NB);
// remote function call
push local 3
push constant 1
add
call Memory.peek 1
pop local 4
//  119     let list[2] = tmp;
// calculate array index
push constant 2
// add base address
push local 5
add
// calculate value
push local 4
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  120     let nxt = tmp;
push local 4
pop local 3
//  121     let i = 3;
push constant 3
pop local 1
//  123     while ( ~(nxt = NIL) & (i < freeSize)) {
label W-EXP0
push local 3
push constant 1
neg
eq
not
push local 1
push local 0
lt
and
not
if-goto W-END0
//  124       let list[i] = Memory.peek(nxt + BS);        // BS
// calculate array index
push local 1
// add base address
push local 5
add
// calculate value
// remote function call
push local 3
push constant 0
add
call Memory.peek 1
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  125       let tmp = Memory.peek(nxt + NB);            // NB
// remote function call
push local 3
push constant 1
add
call Memory.peek 1
pop local 4
//  126       let list[i + 1] = tmp;
// calculate array index
push local 1
push constant 1
add
// add base address
push local 5
add
// calculate value
push local 4
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  127       let nxt = tmp;
push local 4
pop local 3
//  128       let i = i + 2;
push local 1
push constant 2
add
pop local 1
goto W-EXP0
label W-END0
//  131     let txt = "FREE: ";
push constant 6
call String.new 1
push constant 70
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 69
call String.appendChar 2
push constant 69
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
pop local 6
//  132     do Output.printString(txt);
// remote function call
push local 6
call Output.printString 1
// discard the void return
pop temp 0
//  133     do Output.printInt(list[0]);
// remote function call
// calculate array index
push constant 0
// add base address
push local 5
add
// read from array
pop pointer 1
push that 0
call Output.printInt 1
// discard the void return
pop temp 0
//  134     do txt.dispose();
// remote method call
// set arg 0 with remote object
push local 6
call String.dispose 1
// discard the void return
pop temp 0
//  135     let max = i;
push local 1
pop local 2
//  136     let i = 1;
push constant 1
pop local 1
//  137     while (i < max) {
label W-EXP1
push local 1
push local 2
lt
not
if-goto W-END1
//  138       do Output.printChar(58);              // ":"
// remote function call
push constant 58
call Output.printChar 1
// discard the void return
pop temp 0
//  139       do Output.printInt(list[i]);
// remote function call
// calculate array index
push local 1
// add base address
push local 5
add
// read from array
pop pointer 1
push that 0
call Output.printInt 1
// discard the void return
pop temp 0
//  140       do Output.printChar(47);              // "/"
// remote function call
push constant 47
call Output.printChar 1
// discard the void return
pop temp 0
//  141       do Output.printInt(list[i + 1]);
// remote function call
// calculate array index
push local 1
push constant 1
add
// add base address
push local 5
add
// read from array
pop pointer 1
push that 0
call Output.printInt 1
// discard the void return
pop temp 0
//  142       let i = i + 2;
push local 1
push constant 2
add
pop local 1
goto W-EXP1
label W-END1
//  144     do Output.println();
// remote function call
call Output.println 0
// discard the void return
pop temp 0
//  146     do list.dispose();
// remote method call
// set arg 0 with remote object
push local 5
call Array.dispose 1
// discard the void return
pop temp 0
//  147     return;
push constant 0
return
// #########################################################
// function void printHeapList
function Main.printHeapList 8
// ## LOCAL         0 heapSize     int     
// ## LOCAL         1 i            int     
// ## LOCAL         2 max          int     
// ## LOCAL         3 nxt          int     
// ## LOCAL         4 siz          int     
// ## LOCAL         5 tmp          int     
// ## LOCAL         6 list         Array   
// ## LOCAL         7 txt          String  
// ## ARGUMENT      0 limit        int     
//  156     let heapSize = 400;                            // guesstimate
push constant 400
pop local 0
//  157     let list = Array.new(heapSize + 2);
// remote function call
push local 0
push constant 2
add
call Array.new 1
pop local 6
//  158     let nxt = 2048;                                // HEAP_START
push constant 2048
pop local 3
//  160     let i = 0;
push constant 0
pop local 1
//  162     while ( ~(nxt = 16383) & (i < heapSize)) {    // HEAP_END
label W-EXP0
push local 3
push constant 16383
eq
not
push local 1
push local 0
lt
and
not
if-goto W-END0
//  163       let tmp = nxt;
push local 3
pop local 5
//  164       let siz = Memory.peek(nxt + BS);
// remote function call
push local 3
push constant 0
add
call Memory.peek 1
pop local 4
//  165       let nxt = nxt + siz;
push local 3
push local 4
add
pop local 3
//  166       if (nxt > limit) {
push local 3
push argument 0
gt
not
if-goto I-ELS0
//  167         let list[i] = tmp;
// calculate array index
push local 1
// add base address
push local 6
add
// calculate value
push local 5
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  168         let list[i + 1] = siz;
// calculate array index
push local 1
push constant 1
add
// add base address
push local 6
add
// calculate value
push local 4
// store into array
pop temp 0
pop pointer 1
push temp 0
pop that 0
//  169         let i = i + 2;
push local 1
push constant 2
add
pop local 1
goto I-END0
label I-ELS0
label I-END0
goto W-EXP0
label W-END0
//  173     let txt = "HEAP > ";
push constant 7
call String.new 1
push constant 72
call String.appendChar 2
push constant 69
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 62
call String.appendChar 2
push constant 32
call String.appendChar 2
pop local 7
//  174     do Output.printString(txt);
// remote function call
push local 7
call Output.printString 1
// discard the void return
pop temp 0
//  175     do Output.printInt(limit);
// remote function call
push argument 0
call Output.printInt 1
// discard the void return
pop temp 0
//  176     do Output.printChar(58);
// remote function call
push constant 58
call Output.printChar 1
// discard the void return
pop temp 0
//  177     do Output.printInt(list[0]);
// remote function call
// calculate array index
push constant 0
// add base address
push local 6
add
// read from array
pop pointer 1
push that 0
call Output.printInt 1
// discard the void return
pop temp 0
//  178     do txt.dispose();
// remote method call
// set arg 0 with remote object
push local 7
call String.dispose 1
// discard the void return
pop temp 0
//  180     let max = i;
push local 1
pop local 2
//  181     let i = 1;
push constant 1
pop local 1
//  182     while (i < max) {
label W-EXP1
push local 1
push local 2
lt
not
if-goto W-END1
//  183       do Output.printChar(58);              // ":"
// remote function call
push constant 58
call Output.printChar 1
// discard the void return
pop temp 0
//  184       do Output.printInt(list[i]);
// remote function call
// calculate array index
push local 1
// add base address
push local 6
add
// read from array
pop pointer 1
push that 0
call Output.printInt 1
// discard the void return
pop temp 0
//  185       do Output.printChar(47);              // "/"
// remote function call
push constant 47
call Output.printChar 1
// discard the void return
pop temp 0
//  186       do Output.printInt(list[i + 1]);
// remote function call
// calculate array index
push local 1
push constant 1
add
// add base address
push local 6
add
// read from array
pop pointer 1
push that 0
call Output.printInt 1
// discard the void return
pop temp 0
//  187       let i = i + 2;
push local 1
push constant 2
add
pop local 1
goto W-EXP1
label W-END1
//  189     do Output.println();
// remote function call
call Output.println 0
// discard the void return
pop temp 0
//  191     do list.dispose();
// remote method call
// set arg 0 with remote object
push local 6
call Array.dispose 1
// discard the void return
pop temp 0
//  192     return;
push constant 0
return
